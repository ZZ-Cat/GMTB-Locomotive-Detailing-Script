@name Locomotive Details/Updatable
@inputs
@outputs Base:entity # Wire this to RattleCan's "Base" output.
@persist DevData:table
@persist [ E O ]:entity [ LocomotiveBody FrontBogey RearBogey EngineerSeat ]:entity [ BogeyComponents ]:table [ LocomotiveBodyModel ]:string
@persist [ LocomotiveBodyData ]:table
@persist [ H Tick ]:number [ HoloEntity ]:entity [ CE ]:array
@autoupdate

function void appRun() {

    #[ Application init. ]#
    if ( first() ) {

        function void printError( Type:string, Message:string ) {
            Type = Type:lower()
            switch( Type ) {
                case "alert",
                    printColor( vec( 255, 220, 0 ), "[ALERT]", vec( 255 ), ": " + Message )
                    break
                case "assert",
                    printColor( vec( 255, 0, 0 ), "[ASSERT]", vec( 255 ), ": " + Message )
                    break
                case "error",
                    printColor( vec( 255, 0, 0 ), "[ERROR]", vec( 255 ), ": " + Message )
                    break
                case "info",
                    printColor( vec( 0, 255, 0 ), "[INFO]", vec( 255 ), ": " + Message )
                    break
                case "notice",
                    printColor( vec( 0, 180, 255 ), "[NOTICE]", vec( 255 ), ": " + Message )
                    break
                default,
                    printColor( vec( 255, 0, 0 ), "[ERROR]", vec( 255 ), ": Invalid message category." )
                    break
            }
        }

        function void appAssert( Condition, Message:string ) {

            if( Condition == 0 ) {

                stopAllTimers()
                runOnTick( 0 )
                printError( "assert", Message )
                exit()

            }
        }

        function void assertAll( Condition, Message:string ) {
            if( Condition == 0 ) {
                CE = entity():getConnectedEntities( array( "parent", "weld", "axis", "adv_ballsocket", "rope" ) )
                for( I = 1, CE:count() ) {
                    CE[ I, entity ]:propNotSolid( 1 )
                    CE[ I, entity ]:propShadow( 0 )
                }
            }
            appAssert( Condition, Message )
        }

        #[ Map Compatibility. ]#
        local MapIsCompatible = 0
        local MapHasPhxTracks = 0
        local Maps = table()
        Maps[ "JTP Maps", array ] = array(
            "gm_iron_siege",
            "gm_promontory",
            "jtp_deadloop",
            "jtp_testtrak"
        )
        Maps[ "TP1 Maps", array ] = array(
            "gm_sunsetgulch_old",
            "gm_sunsetgulch_older",
            "gm_sunsetgulch_oldest",
            "gm_trainset",
            "gm_trainset_snowy"
        )
        Maps[ "TP2 Maps", array ] = array(
            "gm_aoh_rr",
           #"gm_aoh_rr_mystictrailedition",
            "gm_aoh_rr_night",
            "gm_aoh_rr_v2",
            "gm_connvalley",
            "gm_grande_valley",
            "gm_hb_terminal",
            "gm_henrysburg_v2",
            "gm_northeast_corridor",
            "gm_rocksiderails_trakpak2",
            "gm_sunsetgulch",
            "gm_sunsetgulch_night",
            "gm_testtrak",
            "gm_traincity_v2",
            "gm_traincity_v2_night",
            "gm_traincity_v2_rain"
        )
        Maps[ "TP3 Maps", array ] = array(
            "gm_humpyard_alphatest_01_day",
            "gm_humpyard_alphatest_01_night",
            "gm_promontory_loop",
            "gm_riceharbor",
            "gm_rocksiderails_trakpak3",
            "gmtb_royhill_summit",
            "trakpak3_testbed"
        )
        if( !MapIsCompatible ) {
            for( I = 1, Maps[ "JTP Maps", array ]:count() ) {
                if( map() == Maps[ "JTP Maps", array ][ I, string ] ) {
                    MapIsCompatible = 1
                    MapHasPhxTracks = 0
                    break
                }
            }
        }
        if( !MapIsCompatible ) {
            for( I = 1, Maps[ "TP1 Maps", array ]:count() ) {
                if( map() == Maps[ "TP1 Maps", array ][ I, string ] ) {
                    MapIsCompatible = 1
                    MapHasPhxTracks = 1
                    printError( "alert", "Expect derailments & stability issues on this map. Drive at your own risk." )
                    break
                }
            }
        }
        if( !MapIsCompatible ) {
            for( I = 1, Maps[ "TP2 Maps", array ]:count() ) {
                if( map() == Maps[ "TP2 Maps", array ][ I, string ] ) {
                    MapIsCompatible = 1
                    MapHasPhxTracks = 1
                    break
                }
            }
        }
        if( !MapIsCompatible ) {
            for( I = 1, Maps[ "TP3 Maps", array ]:count() ) {
                if( map() == Maps[ "TP3 Maps", array ][ I, string ] ) {
                    MapIsCompatible = 1
                    MapHasPhxTracks = 0
                    break
                }
            }
        }
        assertAll( MapIsCompatible, "Incompatible Map." )

        # Entity Data.
        E = entity()
        O = owner()

        #[ Automatic Parenting. ]#
        if ( !E:parent() ) {

            # Get the entity that this E2 is welded to.
            local W = E:isWeldedTo()

            # Check for validity.
            if ( W ) {

                # Remove weld constraint & parent the E2 to the entity that you've attached it to.
                E:constraintBreak( "weld", W )
                E:parentTo( W )

            }
        }

        # The parented entity should be the locomotive's body.
        LocomotiveBody = E:parent()
        LocomotiveBodyModel = LocomotiveBody:model()

        appAssert( LocomotiveBodyModel != "", "Invalid model." )

        local ModelPathArray = LocomotiveBodyModel:explode( "/" )

        if( ModelPathArray[ 1, string ] == "models" ) {

            switch( ModelPathArray[ 2, string ] ) {

                case "gsgtrainprops",
                    if( ModelPathArray[ 3, string ] == "trains" && ModelPathArray[ 4, string ] == "propper" ) {
                        switch( ModelPathArray[ 5, string ]:explode( "." )[ 1, string ] ) {

                            case "emd_f40ph",
                               #appAssert( 0, "Program terminated." )
                                LocomotiveBodyData[ "Bogey Model",                  string  ] = MapHasPhxTracks == 1 ? "models/magtrainslocos/trucks/blomberg_m_phx.mdl" : "models/magtrainslocos/trucks/blomberg_m_rsg.mdl"
                                LocomotiveBodyData[ "Front Bogey Position",         vector  ] = LocomotiveBody:toWorld( vec( -198, 0, 2.0 ) )
                                LocomotiveBodyData[ "Front Bogey Angle",            angle   ] = LocomotiveBody:toWorld( ang( 0, 270, 0 ) )
                                LocomotiveBodyData[ "Front Bogey Axis Offset",      vector  ] = vec( 0, 0, 10 )
                                LocomotiveBodyData[ "Rear Bogey Position",          vector  ] = LocomotiveBody:toWorld( vec( 198, 0, 2.0 ) )
                                LocomotiveBodyData[ "Rear Bogey Angle",             angle   ] = LocomotiveBody:toWorld( ang( 0, 90, 0 ) )
                                LocomotiveBodyData[ "Rear Bogey Axis Offset",       vector  ] = vec( 0, 0, 10 )
                                LocomotiveBodyData[ "Engineer's Seat Model",        string  ] = "models/magtrainslocos/cabseats/cabseat_emd.mdl"
                                LocomotiveBodyData[ "Engineer's Seat Position",     vector  ] = LocomotiveBody:toWorld( vec( -( LocomotiveBody:boxMax():x() - 116 ), LocomotiveBody:boxMax():y() - 20, 48.5 ) )
                                LocomotiveBodyData[ "Engineer's Seat Angle",        angle   ] = LocomotiveBody:toWorld( ang( 0, 90, 0 ) )
                                break

                            case "emd_sd40",
                                assertAll( MapHasPhxTracks, "Locomotive has PHX bogeys." )
                                LocomotiveBodyData[ "Bogey Model",                  string  ] = "models/magtrains/locobogey3.mdl"
                                LocomotiveBodyData[ "Front Bogey Position",         vector  ] = LocomotiveBody:toWorld( vec( -240, 0, -1.0 ) )
                                LocomotiveBodyData[ "Front Bogey Angle",            angle   ] = LocomotiveBody:toWorld( ang( 0, 270, 0 ) )
                                LocomotiveBodyData[ "Front Bogey Axis Offset",      vector  ] = vec( 0, 0, 10 )
                                LocomotiveBodyData[ "Rear Bogey Position",          vector  ] = LocomotiveBody:toWorld( vec( 240, 0, -1.0 ) )
                                LocomotiveBodyData[ "Rear Bogey Angle",             angle   ] = LocomotiveBody:toWorld( ang( 0, 90, 0 ) )
                                LocomotiveBodyData[ "Rear Bogey Axis Offset",       vector  ] = vec( 0, 0, 10 )
                                LocomotiveBodyData[ "Engineer's Seat Model",        string  ] = "models/magtrainslocos/cabseats/cabseat_emd.mdl"
                                LocomotiveBodyData[ "Engineer's Seat Position",     vector  ] = LocomotiveBody:toWorld( vec( -( LocomotiveBody:boxMax():x() - 185 ), LocomotiveBody:boxMax():y() - 14, 46 ) )
                                LocomotiveBodyData[ "Engineer's Seat Angle",        angle   ] = LocomotiveBody:toWorld( ang( 0, 90, 0 ) )
                                break

                            default,
                                break
                        }
                    }
                    break

                default,
                    print( "Hello, world." )
                    break

            }
        }

        # Run this script when the E2 gets deleted. This will clean up any resources that were allocated by this script.
        runOnLast( 1 )
        runOnTick( 1 )

    }

    #[ Spawn Handler. ]#
    if( tickClk() ) {

        # Watchdog for redundancy - IE Catching runaway code.
        timer( "watchdog", 5000 )

        # Task manager.
        switch( Tick ) {

            # Convars.
            case 0,

                # Automatically enable the 'wire_holograms_modelany' convar, if it's been previously disabled.
                if( holoModelAny() == 0 ) {

                    # Assert if the convar has been white-listed.
                    appAssert( concmd( "wire_holograms_modelany 1" ), "Holograms are disabled on this server." )

                }

                # Step to the next task.
                Tick++
                stoptimer( "watchdog" )
                break

            # Automatic detection of connected entities.
            case 1,

                # Scan for connected entities.
                CE = LocomotiveBody:getConnectedEntities( array( "axis" ) )

                # Remove the locomotive body from the list.
                if( CE[ 1, entity ]:model() == LocomotiveBodyModel ) {

                    CE:remove( 1 )

                }

                #Step to the next task.
                Tick++
                stoptimer( "watchdog" )
                break

            # Front bogey spawner.
            case 2,

                # No front bogey exista.
                if( !CE[ 1, entity ] ) {

                    # Safety buffer.
                    if( !propCanCreate() ) { exit() }

                    # Spawn in the front bogey & apply constraint data to it.
                    FrontBogey = propSpawn( LocomotiveBodyData[ "Bogey Model", string ], LocomotiveBodyData[ "Front Bogey Position", vector ], LocomotiveBodyData[ "Front Bogey Angle", angle ], 1 )
                    axis( FrontBogey, FrontBogey:massCenterL(), LocomotiveBody, LocomotiveBody:toLocal( FrontBogey:massCenter() + LocomotiveBodyData[ "Front Bogey Axis Offset", vector ] ) )
                    noCollide( FrontBogey, LocomotiveBody )
                    FrontBogey:propPhysicalMaterial( "friction_00" )

                    # Step to the next task.
                    Tick++
                    stoptimer( "watchdog" )

                }

                # Front bogey exists.
                else {

                    # Front bogey is incorrect.
                    if( CE[ 1, entity ]:model() != LocomotiveBodyData[ "Bogey Model", string ] ) {

                        # Safety buffer.
                        if( !propCanCreate() ) { exit() }

                        # Yeetus deleetus! Filthy fucking bogey, yuck!
                        CE[ 1, entity ]:propDelete()

                        # Respawn, bitch!
                        FrontBogey = propSpawn( LocomotiveBodyData[ "Bogey Model", string ], LocomotiveBodyData[ "Front Bogey Position", vector ], LocomotiveBodyData[ "Front Bogey Angle", angle ], 1 )
                        axis( FrontBogey, FrontBogey:massCenterL(), LocomotiveBody, LocomotiveBody:toLocal( FrontBogey:massCenter() + LocomotiveBodyData[ "Front Bogey Axis Offset", vector ] ) )
                        noCollide( FrontBogey, LocomotiveBody )
                        FrontBogey:propPhysicalMaterial( "friction_00" )

                        # Step to the next task.
                        Tick++
                        stoptimer( "watchdog" )

                    }

                    # Front bogey is correct.
                    else {

                        # Initialize.
                        FrontBogey = CE[ 1, entity ]

                        # Step to the next task.
                        Tick++
                        stoptimer( "watchdog" )

                    }
                }
                break

            # Rear bogey spawner.
            case 3,

                # No rear bogey exista.
                if( !CE[ 2, entity ] ) {

                    # Safety buffer.
                    if( !propCanCreate() ) { exit() }

                    # Spawn in the front bogey & apply constraint data to it.
                    RearBogey = propSpawn( LocomotiveBodyData[ "Bogey Model", string ], LocomotiveBodyData[ "Rear Bogey Position", vector ], LocomotiveBodyData[ "Rear Bogey Angle", angle ], 1 )
                    axis( RearBogey, RearBogey:massCenterL(), LocomotiveBody, LocomotiveBody:toLocal( RearBogey:massCenter() + LocomotiveBodyData[ "Rear Bogey Axis Offset", vector ] ) )
                    noCollide( RearBogey, LocomotiveBody )
                    RearBogey:propPhysicalMaterial( "friction_00" )

                    # Step to the next task.
                    Tick++
                    stoptimer( "watchdog" )

                }

                # Rear bogey exists.
                else {

                    # Rear bogey is incorrect.
                    if( CE[ 2, entity ]:model() != LocomotiveBodyData[ "Bogey Model", string ] ) {

                        # Safety buffer.
                        if( !propCanCreate() ) { exit() }

                        # Yeetus deleetus! Filthy fucking bogey, yuck!
                        CE[ 2, entity ]:propDelete()

                        # Respawn, bitch!
                        RearBogey = propSpawn( LocomotiveBodyData[ "Bogey Model", string ], LocomotiveBodyData[ "Rear Bogey Position", vector ], LocomotiveBodyData[ "Rear Bogey Angle", angle ], 1 )
                        axis( RearBogey, RearBogey:massCenterL(), LocomotiveBody, LocomotiveBody:toLocal( RearBogey:massCenter() + LocomotiveBodyData[ "Rear Bogey Axis Offset", vector ] ) )
                        noCollide( RearBogey, LocomotiveBody )
                        RearBogey:propPhysicalMaterial( "friction_00" )

                        # Step to the next task.
                        Tick++
                        stoptimer( "watchdog" )

                    }

                    # Rear bogey is correct.
                    else {

                        # Initialize.
                        RearBogey = CE[ 2, entity ]

                        # Step to the next task.
                        Tick++
                        stoptimer( "watchdog" )

                    }
                }
                break

            case 4,

                # Safety third!
                if( !propCanCreate() ) { exit() }

                # Scan for a Parenting Gate.
                C = LocomotiveBody:children()
                for( I = 1, C:count() ) {

                    # Parenting Gate exists.
                    if( C[ I, entity ]:type() == "gmod_wire_gate" ) {

                        # Get Engineer's Seat.
                        EngineerSeat = C[ I, entity ]:children()[ 1, entity ]

                        # Uncomment these, to adjust the seat position.
                       #EngineerSeat:propDelete()
                       #EngineerSeat = noentity()

                        # No Engineer's Seat Exists.
                        if( !EngineerSeat ) {

                            # Spawn in an Engineer's Seat.
                            EngineerSeat = seatSpawn(
                                LocomotiveBodyData[ "Engineer's Seat Model", string ],
                                LocomotiveBodyData[ "Engineer's Seat Position", vector ],
                                LocomotiveBodyData[ "Engineer's Seat Angle", angle ],
                                1
                            )
                            EngineerSeat:parentTo( C[ I, entity ] )

                            #Step to the next task.
                            Tick++
                            stoptimer( "watchdog" )
                            break

                        }

                        # Engineer's Seat exists.
                        else {

                            # Engineer's Seat is incorrect.
                            if( EngineerSeat:model() != LocomotiveBodyData[ "Engineer's Seat Model", string ] ) {

                                # Yeetus deletus!
                                EngineerSeat:propDelete()

                                # Respawn, bitch!
                                EngineerSeat = seatSpawn(
                                    LocomotiveBodyData[ "Engineer's Seat Model", string ],
                                    LocomotiveBodyData[ "Engineer's Seat Position", vector ],
                                    LocomotiveBodyData[ "Engineer's Seat Angle", angle ],
                                    1
                                )
                                EngineerSeat:parentTo( C[ I, entity ] )

                                #Step to the next task.
                                Tick++
                                stoptimer( "watchdog" )
                                break

                            }

                            # Engineer's Seat is correct.
                            else {

                                #Step to the next task.
                                Tick++
                                stoptimer( "watchdog" )
                                break

                            }
                        }
                    }
                }
                break

            # Tasks complete.
            default,
                runOnTick( 0 )
                stoptimer( "watchdog" )
                break

        }
    }

    #[ Watchdog Handler. ]#
    if( clk( "watchdog" ) ) { appAssert( 0, "Watchdog timed out." ) }

    #[ Resource Cleanup. ]#
    if ( removing() ) {

        LocomotiveBody:propDraw( 1 )

        # Delete previously spawned entities.
        FrontBogey:propDelete()
        RearBogey:propDelete()
        EngineerSeat:propDelete()

    }
}

#[ Developer's Data. DO NOT CHANGE/DELETE/REMOVE! ]#
function void appInit() { DevData[ "App Author", string ] = "Cassie Robinson"
                          DevData[ "App Name", string ] = "Locomotive Details-Updatable"
                          DevData[ "App Version", string ] = "0.5.0" }
#[ End of Developer's Data. ]#
